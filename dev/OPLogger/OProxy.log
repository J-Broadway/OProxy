<OProxy [DEBUG:Flush]> 
<OProxy [DEBUG:_add]> Processing 'items' in container 'root'
<OProxy [INFO:_add]> Creating new container 'items'
<OProxy [DEBUG:_add]> List of OPs provided, count: 3
 Validating OP 1/3: op1
 Validated OP: op1 (path: /project1/myProject/op1)
 Validating OP 2/3: op2
 Validated OP: op2 (path: /project1/myProject/op2)
 Validating OP 3/3: op3
 Validated OP: op3 (path: /project1/myProject/op3)
 Creating container with path 'items'
 Adding 3 OPs as leaves to container 'items'
 Creating leaf for OP 'op1' with path 'items.op1'
 Creating leaf for OP 'op2' with path 'items.op2'
 Creating leaf for OP 'op3' with path 'items.op3'
 Adding container 'items' to parent children dict
<OProxy [INFO:_add]> Successfully created container 'items' with 3 OPs
<OProxy [DEBUG:_update_storage]> Saving container hierarchy to storage
 Saved 1 top-level containers to storage
<OProxy [TEST:storage]> 
Line 61: Storage after _add --> {
  "OProxies": {
    "children": {
      "items": {
        "children": {},
        "ops": {
          "op1": {
            "path": "/project1/myProject/op1",
            "op": "<OP_OBJECT>",
            "extensions": {}
          },
          "op2": {
            "path": "/project1/myProject/op2",
            "op": "<OP_OBJECT>",
            "extensions": {}
          },
          "op3": {
            "path": "/project1/myProject/op3",
            "op": "<OP_OBJECT>",
            "extensions": {}
          }
        },
        "extensions": {}
      }
    },
    "extensions": {}
  }
}

<OProxy [TEST:result]> 
Checking if storage matches expected --> STORAGE TEST PASSED

<OProxy [TEST:access]> Accessibility Test: op1
 Accessibility Test: op2
 Accessibility Test: op3
 Accessibility Test by [0] op1
 Accessibility Test by [1] op2
 Accessibility Test by [2] op3
<OProxy [TEST:info]> 
Testing Nested structure

<OProxy [DEBUG:_add]> Processing 'nest' in container 'items'
<OProxy [INFO:_add]> Creating new container 'nest'
<OProxy [DEBUG:_add]> List of OPs provided, count: 3
 Validating OP 1/3: op1
 Validated OP: op1 (path: /project1/myProject/op1)
 Validating OP 2/3: op2
 Validated OP: op2 (path: /project1/myProject/op2)
 Validating OP 3/3: op3
 Validated OP: op3 (path: /project1/myProject/op3)
 Creating container with path 'items.nest'
 Adding 3 OPs as leaves to container 'nest'
 Creating leaf for OP 'op1' with path 'items.nest.op1'
 Creating leaf for OP 'op2' with path 'items.nest.op2'
 Creating leaf for OP 'op3' with path 'items.nest.op3'
 Adding container 'nest' to parent children dict
<OProxy [INFO:_add]> Successfully created container 'nest' with 3 OPs
<OProxy [DEBUG:_update_storage]> Saving container hierarchy to storage
 Saved 1 top-level containers to storage
<OProxy [DEBUG:_add]> Processing 'second_nest' in container 'items'
<OProxy [INFO:_add]> Creating new container 'second_nest'
<OProxy [DEBUG:_add]> List of OPs provided, count: 3
 Validating OP 1/3: op1
 Validated OP: op1 (path: /project1/myProject/op1)
 Validating OP 2/3: op2
 Validated OP: op2 (path: /project1/myProject/op2)
 Validating OP 3/3: op3
 Validated OP: op3 (path: /project1/myProject/op3)
 Creating container with path 'items.second_nest'
 Adding 3 OPs as leaves to container 'second_nest'
 Creating leaf for OP 'op1' with path 'items.second_nest.op1'
 Creating leaf for OP 'op2' with path 'items.second_nest.op2'
 Creating leaf for OP 'op3' with path 'items.second_nest.op3'
 Adding container 'second_nest' to parent children dict
<OProxy [INFO:_add]> Successfully created container 'second_nest' with 3 OPs
<OProxy [DEBUG:_update_storage]> Saving container hierarchy to storage
 Saved 1 top-level containers to storage
<OProxy [TEST:storage]> 
Storage after _add nested --> {
  "OProxies": {
    "children": {
      "items": {
        "children": {
          "nest": {
            "children": {},
            "ops": {
              "op1": {
                "path": "/project1/myProject/op1",
                "op": "<OP_OBJECT>",
                "extensions": {}
              },
              "op2": {
                "path": "/project1/myProject/op2",
                "op": "<OP_OBJECT>",
                "extensions": {}
              },
              "op3": {
                "path": "/project1/myProject/op3",
                "op": "<OP_OBJECT>",
                "extensions": {}
              }
            },
            "extensions": {}
          },
          "second_nest": {
            "children": {},
            "ops": {
              "op1": {
                "path": "/project1/myProject/op1",
                "op": "<OP_OBJECT>",
                "extensions": {}
              },
              "op2": {
                "path": "/project1/myProject/op2",
                "op": "<OP_OBJECT>",
                "extensions": {}
              },
              "op3": {
                "path": "/project1/myProject/op3",
                "op": "<OP_OBJECT>",
                "extensions": {}
              }
            },
            "extensions": {}
          }
        },
        "ops": {
          "op1": {
            "path": "/project1/myProject/op1",
            "op": "<OP_OBJECT>",
            "extensions": {}
          },
          "op2": {
            "path": "/project1/myProject/op2",
            "op": "<OP_OBJECT>",
            "extensions": {}
          },
          "op3": {
            "path": "/project1/myProject/op3",
            "op": "<OP_OBJECT>",
            "extensions": {}
          }
        },
        "extensions": {}
      }
    },
    "extensions": {}
  }
}

<OProxy [TEST:result]> 
Checking if nested storage matches expected --> STORAGE TEST PASSED

<OProxy [TEST:info]> 
Begin testing _remove() functionality

<OProxy [TEST:storage]> 
Current storage before _remove --> {
  "OProxies": {
    "children": {
      "items": {
        "children": {
          "nest": {
            "children": {},
            "ops": {
              "op1": {
                "path": "/project1/myProject/op1",
                "op": "<OP_OBJECT>",
                "extensions": {}
              },
              "op2": {
                "path": "/project1/myProject/op2",
                "op": "<OP_OBJECT>",
                "extensions": {}
              },
              "op3": {
                "path": "/project1/myProject/op3",
                "op": "<OP_OBJECT>",
                "extensions": {}
              }
            },
            "extensions": {}
          },
          "second_nest": {
            "children": {},
            "ops": {
              "op1": {
                "path": "/project1/myProject/op1",
                "op": "<OP_OBJECT>",
                "extensions": {}
              },
              "op2": {
                "path": "/project1/myProject/op2",
                "op": "<OP_OBJECT>",
                "extensions": {}
              },
              "op3": {
                "path": "/project1/myProject/op3",
                "op": "<OP_OBJECT>",
                "extensions": {}
              }
            },
            "extensions": {}
          }
        },
        "ops": {
          "op1": {
            "path": "/project1/myProject/op1",
            "op": "<OP_OBJECT>",
            "extensions": {}
          },
          "op2": {
            "path": "/project1/myProject/op2",
            "op": "<OP_OBJECT>",
            "extensions": {}
          },
          "op3": {
            "path": "/project1/myProject/op3",
            "op": "<OP_OBJECT>",
            "extensions": {}
          }
        },
        "extensions": {}
      }
    },
    "extensions": {}
  }
}

<OProxy [INFO:_remove]> Removing child 'op1' from container 'items'
<OProxy [DEBUG:_update_storage]> Saving container hierarchy to storage
 Saved 1 top-level containers to storage
<OProxy [INFO:_remove]> Removing child 'op3' from container 'items'
<OProxy [DEBUG:_update_storage]> Saving container hierarchy to storage
 Saved 1 top-level containers to storage
<OProxy [TEST:storage]> 
Current storage after removal of op1 and op3 --> {
  "OProxies": {
    "children": {
      "items": {
        "children": {
          "nest": {
            "children": {},
            "ops": {
              "op1": {
                "path": "/project1/myProject/op1",
                "op": "<OP_OBJECT>",
                "extensions": {}
              },
              "op2": {
                "path": "/project1/myProject/op2",
                "op": "<OP_OBJECT>",
                "extensions": {}
              },
              "op3": {
                "path": "/project1/myProject/op3",
                "op": "<OP_OBJECT>",
                "extensions": {}
              }
            },
            "extensions": {}
          },
          "second_nest": {
            "children": {},
            "ops": {
              "op1": {
                "path": "/project1/myProject/op1",
                "op": "<OP_OBJECT>",
                "extensions": {}
              },
              "op2": {
                "path": "/project1/myProject/op2",
                "op": "<OP_OBJECT>",
                "extensions": {}
              },
              "op3": {
                "path": "/project1/myProject/op3",
                "op": "<OP_OBJECT>",
                "extensions": {}
              }
            },
            "extensions": {}
          }
        },
        "ops": {
          "op2": {
            "path": "/project1/myProject/op2",
            "op": "<OP_OBJECT>",
            "extensions": {}
          }
        },
        "extensions": {}
      }
    },
    "extensions": {}
  }
}

<OProxy [TEST:result]> 
Checking if _remove() functionality works as expected --> STORAGE TEST PASSED

<OProxy [TEST:info]> 
Going to add another container and test _remove() functionality

<OProxy [DEBUG:_add]> Processing 'ANOTHER_NEST' in container 'items.nest'
<OProxy [INFO:_add]> Creating new container 'ANOTHER_NEST'
<OProxy [DEBUG:_add]> List of OPs provided, count: 3
 Validating OP 1/3: op1
 Validated OP: op1 (path: /project1/myProject/op1)
 Validating OP 2/3: op2
 Validated OP: op2 (path: /project1/myProject/op2)
 Validating OP 3/3: op3
 Validated OP: op3 (path: /project1/myProject/op3)
 Creating container with path 'items.nest.ANOTHER_NEST'
 Adding 3 OPs as leaves to container 'ANOTHER_NEST'
 Creating leaf for OP 'op1' with path 'items.nest.ANOTHER_NEST.op1'
 Creating leaf for OP 'op2' with path 'items.nest.ANOTHER_NEST.op2'
 Creating leaf for OP 'op3' with path 'items.nest.ANOTHER_NEST.op3'
 Adding container 'ANOTHER_NEST' to parent children dict
<OProxy [INFO:_add]> Successfully created container 'ANOTHER_NEST' with 3 OPs
<OProxy [DEBUG:_update_storage]> Saving container hierarchy to storage
 Saved 1 top-level containers to storage
<OProxy [TEST:storage]> 
Current storage after adding 'ANOTHER_NEST' container --> {
  "OProxies": {
    "children": {
      "items": {
        "children": {
          "nest": {
            "children": {
              "ANOTHER_NEST": {
                "children": {},
                "ops": {
                  "op1": {
                    "path": "/project1/myProject/op1",
                    "op": "<OP_OBJECT>",
                    "extensions": {}
                  },
                  "op2": {
                    "path": "/project1/myProject/op2",
                    "op": "<OP_OBJECT>",
                    "extensions": {}
                  },
                  "op3": {
                    "path": "/project1/myProject/op3",
                    "op": "<OP_OBJECT>",
                    "extensions": {}
                  }
                },
                "extensions": {}
              }
            },
            "ops": {
              "op1": {
                "path": "/project1/myProject/op1",
                "op": "<OP_OBJECT>",
                "extensions": {}
              },
              "op2": {
                "path": "/project1/myProject/op2",
                "op": "<OP_OBJECT>",
                "extensions": {}
              },
              "op3": {
                "path": "/project1/myProject/op3",
                "op": "<OP_OBJECT>",
                "extensions": {}
              }
            },
            "extensions": {}
          },
          "second_nest": {
            "children": {},
            "ops": {
              "op1": {
                "path": "/project1/myProject/op1",
                "op": "<OP_OBJECT>",
                "extensions": {}
              },
              "op2": {
                "path": "/project1/myProject/op2",
                "op": "<OP_OBJECT>",
                "extensions": {}
              },
              "op3": {
                "path": "/project1/myProject/op3",
                "op": "<OP_OBJECT>",
                "extensions": {}
              }
            },
            "extensions": {}
          }
        },
        "ops": {
          "op2": {
            "path": "/project1/myProject/op2",
            "op": "<OP_OBJECT>",
            "extensions": {}
          }
        },
        "extensions": {}
      }
    },
    "extensions": {}
  }
}

<OProxy [TEST:result]> 
Checking above test --> STORAGE TEST PASSED

<OProxy [TEST:info]> 
Gonna remove an entire branch

<OProxy [DEBUG:_remove]> Removing self ('items') from parent
<OProxy [DEBUG:_update_storage]> Saving container hierarchy to storage
 Saved 0 top-level containers to storage
<OProxy [TEST:storage]> 
Current storage after removing entire branch --> {
  "OProxies": {
    "children": {},
    "extensions": {}
  }
}

<OProxy [TEST:result]> 
Checking above test --> STORAGE TEST PASSED

<OProxy [TEST:info]> 
Add container and try to remove individual leaves like this opr.items("op1")._remove()

<OProxy [DEBUG:_add]> Processing 'items' in container 'root'
<OProxy [INFO:_add]> Creating new container 'items'
<OProxy [DEBUG:_add]> List of OPs provided, count: 3
 Validating OP 1/3: op1
 Validated OP: op1 (path: /project1/myProject/op1)
 Validating OP 2/3: op2
 Validated OP: op2 (path: /project1/myProject/op2)
 Validating OP 3/3: op3
 Validated OP: op3 (path: /project1/myProject/op3)
 Creating container with path 'items'
 Adding 3 OPs as leaves to container 'items'
 Creating leaf for OP 'op1' with path 'items.op1'
 Creating leaf for OP 'op2' with path 'items.op2'
 Creating leaf for OP 'op3' with path 'items.op3'
 Adding container 'items' to parent children dict
<OProxy [INFO:_add]> Successfully created container 'items' with 3 OPs
<OProxy [DEBUG:_update_storage]> Saving container hierarchy to storage
 Saved 1 top-level containers to storage
<OProxy [TEST:storage]> 
Current storage after adding "items" container for OPLeaf testing --> {
  "OProxies": {
    "children": {
      "items": {
        "children": {},
        "ops": {
          "op1": {
            "path": "/project1/myProject/op1",
            "op": "<OP_OBJECT>",
            "extensions": {}
          },
          "op2": {
            "path": "/project1/myProject/op2",
            "op": "<OP_OBJECT>",
            "extensions": {}
          },
          "op3": {
            "path": "/project1/myProject/op3",
            "op": "<OP_OBJECT>",
            "extensions": {}
          }
        },
        "extensions": {}
      }
    },
    "extensions": {}
  }
}

<OProxy [DEBUG:_remove]> Removing leaf 'op1' from parent container
<OProxy [DEBUG:_update_storage]> Saving container hierarchy to storage
 Saved 1 top-level containers to storage
<OProxy [DEBUG:_remove]> Removing leaf 'op2' from parent container
<OProxy [DEBUG:_update_storage]> Saving container hierarchy to storage
 Saved 1 top-level containers to storage
<OProxy [TEST:storage]> 
Current storage after removing OPLeafs --> {
  "OProxies": {
    "children": {
      "items": {
        "children": {},
        "ops": {
          "op3": {
            "path": "/project1/myProject/op3",
            "op": "<OP_OBJECT>",
            "extensions": {}
          }
        },
        "extensions": {}
      }
    },
    "extensions": {}
  }
}

<OProxy [TEST:result]> 
Checking above test --> STORAGE TEST PASSED

<OProxy [TEST:info]> 
Clearing storage!

<OProxy [INFO:_clear]> Starting _clear operation
<OProxy [DEBUG:_clear]> Clearing OProxies storage with 1 containers
 Reset OProxies to empty state
 Clearing in-memory hierarchy with 1 containers
 Reloading empty hierarchy
<OProxy [INFO:_clear]> _clear operation completed
<OProxy [TEST:complete]> ==========TESTS COMPLETED==========
