<OProxy [DEBUG:Flush]> 
<OProxy [INFO:_clear]> Starting _clear operation
<OProxy [DEBUG:_clear]> Clearing root extensions: []
 Restoring OProxies to default empty state
 Clearing in-memory hierarchy with 1 containers
 Reloading empty hierarchy
<OProxy [INFO:_clear]> _clear operation completed
<OProxy [TEST:info]> 
Adding container

<OProxy [DEBUG:_add]> Processing 'items' in container 'root'
<OProxy [INFO:_add]> Creating new container 'items'
<OProxy [DEBUG:_add]> List of OPs provided, count: 3
 Validating OP 1/3: op1
 Validated OP: op1 (path: /project1/myProject/op1)
 Validating OP 2/3: op2
 Validated OP: op2 (path: /project1/myProject/op2)
 Validating OP 3/3: op3
 Validated OP: op3 (path: /project1/myProject/op3)
 Creating container with path 'items'
 Adding 3 OPs as leaves to container 'items'
 Creating leaf for OP 'op1' with path 'items.op1'
 Creating leaf for OP 'op2' with path 'items.op2'
 Creating leaf for OP 'op3' with path 'items.op3'
 Adding container 'items' to parent children dict
<OProxy [INFO:_add]> Successfully created container 'items' with 3 OPs
<OProxy [DEBUG:_update_storage]> Saving container hierarchy to storage
 Saved 1 top-level containers to storage
<OProxy [TEST:info]> 
Showing storage after _add()

<OProxy [INFO:_storage]> Storage branch for container 'root'
"root" : {
    "children": {
        "items": {
            "children": {},
            "ops": {
                "op1": {
                    "op": {
                        "name": "op1",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/op1"
                    },
                    "extensions": {}
                },
                "op2": {
                    "op": {
                        "name": "op2",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/op2"
                    },
                    "extensions": {}
                },
                "op3": {
                    "op": {
                        "name": "op3",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/op3"
                    },
                    "extensions": {}
                }
            },
            "extensions": {}
        }
    },
    "extensions": {}
}
<OProxy [INFO]> Checking if storage matches expected after _add() -------> TEST PASSED
<OProxy [TEST:info]> 
Calling opr.items('op1').name

<OProxy [INFO]> opr.items('op1') ------> op1
<OProxy [TEST:info]> 
Renaming "op1" to "changed1"

 
Logging opr.items('op1').name to show it still works before refresh. Below you should see name is 'changed1'

<OProxy [INFO]> changed1
<OProxy [TEST:info]> 
showing storage before opr._refresh() 

<OProxy [INFO:_storage]> Storage branch for container 'root'
"root" : {
    "children": {
        "items": {
            "children": {},
            "ops": {
                "op1": {
                    "op": {
                        "name": "changed1",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/changed1"
                    },
                    "extensions": {}
                },
                "op2": {
                    "op": {
                        "name": "op2",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/op2"
                    },
                    "extensions": {}
                },
                "op3": {
                    "op": {
                        "name": "op3",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/op3"
                    },
                    "extensions": {}
                }
            },
            "extensions": {}
        }
    },
    "extensions": {}
}
<OProxy [INFO]> Checking if storage matches expected after renaming "op1" to "changed1" "op1" does not have the proper name yet because _refresh() has not been run yet -------> TEST PASSED
<OProxy [TEST:info]> 
Now Running _refresh()

<OProxy [DEBUG:_refresh]> Loading nested container 'items' under ''
 Loading nested OP 'op1' from '/project1/myProject/op1'
 Using stored OP object for nested 'op1' (original path may have changed)
<OProxy [INFO:_refresh]> Nested OP name changed from 'op1' to 'changed1', updating mapping
<OProxy [DEBUG:_refresh]> Loading nested OP 'op2' from '/project1/myProject/op2'
 Loading nested OP 'op3' from '/project1/myProject/op3'
 Loading nested OP 'op1' from '/project1/myProject/op1'
 Using stored OP object for nested 'op1' (original path may have changed)
<OProxy [INFO:_refresh]> Nested OP name changed from 'op1' to 'changed1', updating mapping
<OProxy [DEBUG:_refresh]> Loading nested OP 'op2' from '/project1/myProject/op2'
 Loading nested OP 'op3' from '/project1/myProject/op3'
<OProxy [TEST:info]> 
checking if name was changed to "changed1"

 
Name was changed to changed1

 
Here's the storage after refresh

<OProxy [INFO:_storage]> Storage branch for container 'root'
"root" : {
    "children": {
        "items": {
            "children": {},
            "ops": {
                "changed1": {
                    "op": {
                        "name": "changed1",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/changed1"
                    },
                    "extensions": {}
                },
                "op2": {
                    "op": {
                        "name": "op2",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/op2"
                    },
                    "extensions": {}
                },
                "op3": {
                    "op": {
                        "name": "op3",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/op3"
                    },
                    "extensions": {}
                }
            },
            "extensions": {}
        }
    },
    "extensions": {}
}
<OProxy [INFO]> Checking if storage matches expected after refresh -------> TEST PASSED
<OProxy [TEST:info]> 
Changing name back to 'op1

 
going to call the new name without refreshing to make sure an error gets called

<OProxy [INFO]> Error triggered as expected...
<OProxy [TEST:info]> 
Now doing opr.items._refresh() to make sure it works

<OProxy [DEBUG:_refresh]> Loading nested OP 'changed1' from '/project1/myProject/changed1'
 Using stored OP object for nested 'changed1' (original path may have changed)
<OProxy [INFO:_refresh]> Nested OP name changed from 'changed1' to 'op1', updating mapping
<OProxy [DEBUG:_refresh]> Loading nested OP 'op2' from '/project1/myProject/op2'
 Loading nested OP 'op3' from '/project1/myProject/op3'
<OProxy [TEST:info]> 
checking if name was changed

 
Can confirm name is "op1"

 
Here's storage

<OProxy [INFO:_storage]> Storage branch for container 'root'
"root" : {
    "children": {
        "items": {
            "children": {},
            "ops": {
                "op1": {
                    "op": {
                        "name": "op1",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/op1"
                    },
                    "extensions": {}
                },
                "op2": {
                    "op": {
                        "name": "op2",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/op2"
                    },
                    "extensions": {}
                },
                "op3": {
                    "op": {
                        "name": "op3",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/op3"
                    },
                    "extensions": {}
                }
            },
            "extensions": {}
        }
    },
    "extensions": {}
}
<OProxy [INFO]> Checking if storage matches expected after refresh -------> TEST PASSED
<OProxy [TEST:info]> 
Now going to rename "op1" --> "changed1" and "op2" --> "changed2" but only call refresh on "op1" to make sure only one name change is detected

 
Here is storage before refresh

<OProxy [INFO:_storage]> Storage branch for container 'root'
"root" : {
    "children": {
        "items": {
            "children": {},
            "ops": {
                "op1": {
                    "op": {
                        "name": "changed1",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/changed1"
                    },
                    "extensions": {}
                },
                "op2": {
                    "op": {
                        "name": "changed2",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/changed2"
                    },
                    "extensions": {}
                },
                "op3": {
                    "op": {
                        "name": "op3",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/op3"
                    },
                    "extensions": {}
                }
            },
            "extensions": {}
        }
    },
    "extensions": {}
}
<OProxy [TEST:info]> 
Running _refresh() on "op1"

<OProxy [INFO:_refresh]> Leaf OP name changed from 'op1' to 'changed1', updating parent mapping
<OProxy [TEST:info]> 
Here is storage after refresh

<OProxy [INFO:_storage]> Storage branch for container 'root'
"root" : {
    "children": {
        "items": {
            "children": {},
            "ops": {
                "changed1": {
                    "op": {
                        "name": "changed1",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/changed1"
                    },
                    "extensions": {}
                },
                "op2": {
                    "op": {
                        "name": "changed2",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/changed2"
                    },
                    "extensions": {}
                },
                "op3": {
                    "op": {
                        "name": "op3",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/op3"
                    },
                    "extensions": {}
                }
            },
            "extensions": {}
        }
    },
    "extensions": {}
}
