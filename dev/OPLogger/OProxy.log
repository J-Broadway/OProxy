<OProxy [DEBUG:Flush]> 
<OProxy [INFO:_clear]> Starting _clear operation
<OProxy [DEBUG:_clear]> Clearing root extensions: []
 Restoring OProxies to default empty state
 Clearing in-memory hierarchy with 1 containers
 Reloading empty hierarchy
<OProxy [DEBUG:_refresh]> Refreshing container '' - parent: None, is_root: True
<OProxy [INFO:_clear]> _clear operation completed
<OProxy [TEST:info]> 
Adding containe opr._add('items', tf.mvs) 

<OProxy [DEBUG:_add]> Processing 'items' in container 'root'
<OProxy [INFO:_add]> Creating new container 'items'
<OProxy [DEBUG:_add]> List of OPs provided, count: 3
 Validating OP 1/3: op1
 Validated OP: op1 (path: /project1/myProject/op1)
 Validating OP 2/3: op2
 Validated OP: op2 (path: /project1/myProject/op2)
 Validating OP 3/3: op3
 Validated OP: op3 (path: /project1/myProject/op3)
 Creating container with path 'items'
<OProxy [DEBUG:__init__]> Initializing OProxyContainer 'items' with parent: OProxyContainer 'root' [], root: False
<OProxy [DEBUG:_add]> Adding 3 OPs as leaves to container 'items'
 Creating leaf for OP 'op1' with path 'items.op1'
 Creating leaf for OP 'op2' with path 'items.op2'
 Creating leaf for OP 'op3' with path 'items.op3'
 Adding container 'items' to parent children dict
<OProxy [INFO:_add]> Successfully created container 'items' with 3 OPs
<OProxy [DEBUG:_update_storage]> Saving container hierarchy to storage
 Saved 1 top-level containers to storage
<OProxy [TEST:info]> 
Showing storage after _add()

<OProxy [INFO:_storage]> Storage branch for container 'root'
"root" : {
    "children": {
        "items": {
            "children": {},
            "ops": {
                "op1": {
                    "op": {
                        "name": "op1",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/op1"
                    },
                    "extensions": {}
                },
                "op2": {
                    "op": {
                        "name": "op2",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/op2"
                    },
                    "extensions": {}
                },
                "op3": {
                    "op": {
                        "name": "op3",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/op3"
                    },
                    "extensions": {}
                }
            },
            "extensions": {}
        }
    },
    "extensions": {}
}
<OProxy [TEST:info]> 
Now going to monkey patch the "items" container

 
verifying that MonkeyPatch path is correct

<OProxy [INFO]> hello world
<OProxy [TEST:info]> 
 now running opr._extend('items', cls='ResolutionMP', dat='extensions_for_tests', monkey_patch=True)

<OProxy [DEBUG:mod_AST:TempDAT]> Temp DAT contents for ResolutionMP:
td_isinstance = mod('OProxy/utils').td_isinstance
log = op('OProxy').Log
mp = mod('OProxy/MonkeyPatch')
class ResolutionMP(mp.OProxyContainer):
	"""Monkey-patched container that adds resolution() to leaves."""

	def __call__(self, identifier, **kwargs):
		# Call parent's __call__ to get the original OProxyLeaf
		leaf = super().__call__(identifier, **kwargs)

		# Create a proxy wrapper to add custom methods to the leaf
		class ResolutionProxy:
			def __init__(self, leaf):
				self._leaf = leaf  # Store the original leaf

			def __getattr__(self, name):
				# Delegate all other attribute access to the original leaf
				return getattr(self._leaf, name)

			def resolution(self):
				# Custom method: Check if the OP is a TOP, then return resolution
				if not td_isinstance(self._leaf._op, 'top'):
					log("Not a TOP operator", status='error')
					raise ValueError("resolution() only for TOPs")
				return (self._leaf._op.width, self._leaf._op.height)

		# Return the proxy instead of the raw leaf
		return ResolutionProxy(leaf)
<OProxy [DEBUG:__init__]> Initializing OProxyContainer 'items' with parent: OProxyContainer 'root' [], root: False
<OProxy [INFO:_extend]> Monkey-patched 'items' with 'ResolutionMP'
<OProxy [TEST:info]> 
showing storage after _extend()

<OProxy [INFO:_storage]> Storage branch for container 'root'
"root" : {
    "children": {
        "items": {
            "children": {},
            "ops": {
                "op1": {
                    "op": {
                        "name": "op1",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/op1"
                    },
                    "extensions": {}
                },
                "op2": {
                    "op": {
                        "name": "op2",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/op2"
                    },
                    "extensions": {}
                },
                "op3": {
                    "op": {
                        "name": "op3",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/op3"
                    },
                    "extensions": {}
                }
            },
            "extensions": {},
            "monkey_patch": {
                "cls": "ResolutionMP",
                "dat": "/project1/myProject/extensions_for_tests",
                "code_hash": "5331cc20f4d7e4459a03385939de75858ed140f365fdcd3fd791eeac823ec006",
                "dat_op": {
                    "name": "extensions_for_tests",
                    "type": "textDAT",
                    "path": "/project1/myProject/extensions_for_tests"
                }
            }
        }
    },
    "extensions": {}
}
<OProxy [TEST:info]> 
Now going to call the monkey patched container

<OProxy [INFO]> (1280, 720)
 (1000, 1000)
<OProxy [TEST:info]> 
Now testing storage persistence after container is re-initialized

<OProxy [DEBUG:__init__]> Initializing OProxyContainer '' with parent: None, root: True
<OProxy [DEBUG:Migration]> Checking for storage format migration
 Storage already in new format, no migration needed
<OProxy [DEBUG:_refresh]> Refreshing container '' - parent: None, is_root: True
 Loading nested container 'items' under ''
<OProxy [DEBUG:mod_AST:TempDAT]> Temp DAT contents for ResolutionMP:
td_isinstance = mod('OProxy/utils').td_isinstance
log = op('OProxy').Log
mp = mod('OProxy/MonkeyPatch')
class ResolutionMP(mp.OProxyContainer):
	"""Monkey-patched container that adds resolution() to leaves."""

	def __call__(self, identifier, **kwargs):
		# Call parent's __call__ to get the original OProxyLeaf
		leaf = super().__call__(identifier, **kwargs)

		# Create a proxy wrapper to add custom methods to the leaf
		class ResolutionProxy:
			def __init__(self, leaf):
				self._leaf = leaf  # Store the original leaf

			def __getattr__(self, name):
				# Delegate all other attribute access to the original leaf
				return getattr(self._leaf, name)

			def resolution(self):
				# Custom method: Check if the OP is a TOP, then return resolution
				if not td_isinstance(self._leaf._op, 'top'):
					log("Not a TOP operator", status='error')
					raise ValueError("resolution() only for TOPs")
				return (self._leaf._op.width, self._leaf._op.height)

		# Return the proxy instead of the raw leaf
		return ResolutionProxy(leaf)
<OProxy [DEBUG:__init__]> Initializing OProxyContainer '.items' with parent: OProxyContainer 'root' [], root: False
<OProxy [INFO:_refresh]> Loading monkey patch container 'items' with 'ResolutionMP'
<OProxy [WARNING:_refresh]> Invalid op_info type for 'op1': DependDict, skipping
 Invalid op_info type for 'op2': DependDict, skipping
 Invalid op_info type for 'op3': DependDict, skipping
<OProxy [DEBUG:_refresh]> Refreshing container '.items' - parent: OProxyContainer 'root' [], is_root: False
<OProxy [INFO:Init]> OProxy root initialized
<OProxy [TEST:info]> 
Calling "resolution()" on monkey patched containers

<OProxy [INFO]> (1280, 720)
 (1000, 1000)
<OProxy [TEST:info]> 
Now testing a monkey patched OPLeaf

<OProxy [DEBUG:mod_AST:TempDAT]> Temp DAT contents for helloWorld:
td_isinstance = mod('OProxy/utils').td_isinstance
log = op('OProxy').Log
mp = mod('OProxy/MonkeyPatch')
class helloWorld(mp.OProxyLeaf):
	def __init__(self, *args, **kwargs):
		super().__init__(*args, **kwargs)

	def helloWorld(self):
		info = {
			'name': self._op.name,
			'path': self._op.path,
			'parent_path': self._op.parent().path if self._op.parent() else None,
			'op_type': self._op.OPType,
			'new_data': 'hello world'
		}
		return info
<OProxy [INFO:_extend]> Monkey-patched 'op1' with 'helloWorld'
<OProxy [TEST:info]> 
checking storage after adding helloWorld monkey patch

<OProxy [INFO:_storage]> Storage branch for container 'root'
"root" : {
    "children": {
        "items": {
            "children": {},
            "ops": {
                "op1": {
                    "op": {
                        "name": "op1",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/op1"
                    },
                    "extensions": {},
                    "monkey_patch": {
                        "cls": "helloWorld",
                        "dat": "/project1/myProject/extensions_for_tests",
                        "code_hash": "5331cc20f4d7e4459a03385939de75858ed140f365fdcd3fd791eeac823ec006",
                        "dat_op": {
                            "name": "extensions_for_tests",
                            "type": "textDAT",
                            "path": "/project1/myProject/extensions_for_tests"
                        }
                    }
                },
                "op2": {
                    "op": {
                        "name": "op2",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/op2"
                    },
                    "extensions": {}
                },
                "op3": {
                    "op": {
                        "name": "op3",
                        "type": "moviefileinTOP",
                        "path": "/project1/myProject/op3"
                    },
                    "extensions": {}
                }
            },
            "extensions": {},
            "monkey_patch": {
                "cls": "ResolutionMP",
                "dat": "/project1/myProject/extensions_for_tests",
                "code_hash": "5331cc20f4d7e4459a03385939de75858ed140f365fdcd3fd791eeac823ec006",
                "dat_op": {
                    "name": "extensions_for_tests",
                    "type": "textDAT",
                    "path": "/project1/myProject/extensions_for_tests"
                }
            }
        }
    },
    "extensions": {}
}
<OProxy [TEST:info]> 
Calling "helloWorld()" on monkey patched OPLeaf

<OProxy [INFO]> {'name': 'op1', 'path': '/project1/myProject/op1', 'parent_path': '/project1/myProject', 'op_type': 'moviefileinTOP', 'new_data': 'hello world'}
<OProxy [TEST:info]> 
Now going to run "monkey_patch_outside_tests" to make sure persistence works

<OProxy [INFO]> File "/project1/myProject/monkey_patch_outside_tests", line 3
  File "/project1/myProject/_oproxy_temp_mod_ast", line 9, in __call__
  File "/project1/myProject/OProxy/OProxyBaseWrapper", line 1345, in __call__
KeyError: "No OP named 'op1' in this container"
Results of run operation resulted in exception.
